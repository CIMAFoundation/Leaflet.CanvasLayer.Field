"use strict";(self.webpackChunkLeafletCanvasLayerField=self.webpackChunkLeafletCanvasLayerField||[]).push([[320],{254:(e,t,r)=>{function n(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function i(e,t,r){let n=0,i=e.length;const l=i/r;for(;i>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;i-=t}const o=e.slice();for(let t=0;t<l;++t)for(let n=0;n<r;++n)e[r*t+n]=o[(r-n-1)*l+t]}r.d(t,{A:()=>l});class l{async decode(e,t){const r=await this.decodeBlock(t),l=e.Predictor||1;if(1!==l){const t=!e.StripOffsets;return function(e,t,r,l,o,a){if(!t||1===t)return e;for(let e=0;e<o.length;++e){if(o[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(o[e]!==o[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const s=o[0]/8,c=2===a?1:o.length;for(let a=0;a<l&&!(a*c*r*s>=e.byteLength);++a){let l;if(2===t){switch(o[0]){case 8:l=new Uint8Array(e,a*c*r*s,c*r*s);break;case 16:l=new Uint16Array(e,a*c*r*s,c*r*s/2);break;case 32:l=new Uint32Array(e,a*c*r*s,c*r*s/4);break;default:throw new Error(`Predictor 2 not allowed with ${o[0]} bits per sample.`)}n(l,c)}else 3===t&&(l=new Uint8Array(e,a*c*r*s,c*r*s),i(l,c,s))}return e}(r,l,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}},320:(e,t,r)=>{r.r(t),r.d(t,{default:()=>i});var n=r(254);class i extends n.A{decodeBlock(e){const t=new DataView(e),r=[];for(let n=0;n<e.byteLength;++n){let e=t.getInt8(n);if(e<0){const i=t.getUint8(n+1);e=-e;for(let t=0;t<=e;++t)r.push(i);n+=1}else{for(let i=0;i<=e;++i)r.push(t.getUint8(n+i+1));n+=e+1}}return new Uint8Array(r).buffer}}}}]);
//# sourceMappingURL=320.leaflet.canvaslayer.field.js.map