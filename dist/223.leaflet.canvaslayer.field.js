"use strict";(self.webpackChunkLeafletCanvasLayerField=self.webpackChunkLeafletCanvasLayerField||[]).push([[223],{254:(e,t,r)=>{function n(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function i(e,t,r){let n=0,i=e.length;const a=i/r;for(;i>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;i-=t}const l=e.slice();for(let t=0;t<a;++t)for(let n=0;n<r;++n)e[r*t+n]=l[(r-n-1)*a+t]}r.d(t,{A:()=>a});class a{async decode(e,t){const r=await this.decodeBlock(t),a=e.Predictor||1;if(1!==a){const t=!e.StripOffsets;return function(e,t,r,a,l,o){if(!t||1===t)return e;for(let e=0;e<l.length;++e){if(l[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[e]!==l[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const s=l[0]/8,c=2===o?1:l.length;for(let o=0;o<a&&!(o*c*r*s>=e.byteLength);++o){let a;if(2===t){switch(l[0]){case 8:a=new Uint8Array(e,o*c*r*s,c*r*s);break;case 16:a=new Uint16Array(e,o*c*r*s,c*r*s/2);break;case 32:a=new Uint32Array(e,o*c*r*s,c*r*s/4);break;default:throw new Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}n(a,c)}else 3===t&&(a=new Uint8Array(e,o*c*r*s,c*r*s),i(a,c,s))}return e}(r,a,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}},223:(e,t,r)=>{r.r(t),r.d(t,{default:()=>i});var n=r(254);class i extends n.A{decodeBlock(e){return e}}}}]);
//# sourceMappingURL=223.leaflet.canvaslayer.field.js.map